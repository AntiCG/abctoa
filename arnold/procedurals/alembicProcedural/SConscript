# vim: filetype=python

## load our own python modules
import system
from build_tools import find_files_recursive

import os

# import build env
Import('arnold_env')
local_env = arnold_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'arnold', 'procedurals', 'alembicProcedural')
source_files  = find_files_recursive(src_base_dir, ['.c', '.cpp'])
include_files = find_files_recursive(src_base_dir, ['.h'])

JSON_INCLUDE_PATH = local_env['JSON_INCLUDE_PATH']
JSON_LIBRARY = local_env['JSON_LIBRARY']

PYSTRING_INCLUDE_PATH = local_env['PYSTRING_INCLUDE_PATH']
PYSTRING_LIBRARY_PATH = local_env['PYSTRING_LIBRARY_PATH']

BOOST_LIBRARY_PATH = local_env['BOOST_LIBRARY_PATH']

local_env.Append(CPPPATH = local_env['CPPPATH']  + [JSON_INCLUDE_PATH, PYSTRING_INCLUDE_PATH])
local_env.Append(LIBPATH = local_env["LIBPATH"] + [PYSTRING_LIBRARY_PATH, BOOST_LIBRARY_PATH])

local_env.Append(LIBS = local_env["LIBS"] + [JSON_LIBRARY, "pyString"] )


ALEMBIC_PLUGIN = local_env.SharedLibrary('AlembicArnoldProcedural', source_files, LIBPREFIX='')

Return('ALEMBIC_PLUGIN')
